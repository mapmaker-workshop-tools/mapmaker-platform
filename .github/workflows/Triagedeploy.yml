name: ü¶∫ Triage deployment
on:
  push:
    branches:
      - '**'        # matches every branch
      - '!master'   # excludes master
permissions:
  contents: read

env:
  AWS_REGION: eu-central-1
  AWS_LIGHTSAIL_SERVICE_NAME: mapmaker
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true
jobs:
  linter:
    name: üîé Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      # Include `--format=github` to enable automatic inline annotations.
      - name: üßôüèª‚Äç‚ôÄÔ∏è Run Ruff
        run: ruff check --format=github .

  testsuite:
    name: ü¶∫  Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip3 install -r Infrastructure/requirements.txt
      - name: ü§ê Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER_GMAIL }}
          envkey_EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD_GMAIL }}
          envkey_DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          envkey_DB_USER: ${{ secrets.DB_TRIAGE_USER }}
          envkey_DB_PASSWORD: ${{ secrets.DB_TRIAGE_PASSWORD }}
          envkey_DB_HOST: ${{ secrets.DB_TRIAGE_HOST }}
          envkey_DB_NAME:  ${{ secrets.DB_TRIAGE_NAME }}
          envkey_HCTI_API_KEY: ${{ secrets.HCTI_API_KEY }}
          envkey_HCTI_API_USER_ID: ${{ secrets.HCTI_API_USER_ID }}
          envkey_MYSQL_ATTR_SSL_CA: ${{ secrets.MYSQL_ATTR_SSL_CA }}
          envkey_SECURE_SETTINGS: True
          envkey_DEBUG: True
          envkey_MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN}}
          envkey_S3_AWS_STORAGE_BUCKET_NAME: ${{ secrets.S3_AWS_STORAGE_BUCKET_NAME}}
          envkey_S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY}}
          envkey_S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY}}
          directory: src/core
          file_name: .env
          fail_on_empty: false
      - name: ü§∑üèª‚Äç‚ôÇÔ∏è Running tests
        run: |
          cd src
          python3 manage.py test --noinput
  buildcontainers:
    name: üåé Deploying Triage

    needs: [linter, testsuite]
    runs-on: ubuntu-latest
    steps:
      - name: üóÇ  Getting code from Github
        uses: actions/checkout@v3
      - name: ‚öôÔ∏è  Updating to the latest versions
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: ü§ê Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER_GMAIL }}
          envkey_EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD_GMAIL }}
          envkey_DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          envkey_DB_USER: ${{ secrets.DB_TRIAGE_USER }}
          envkey_DB_PASSWORD: ${{ secrets.DB_TRIAGE_PASSWORD }}
          envkey_DB_HOST: ${{ secrets.DB_TRIAGE_HOST }}
          envkey_DB_NAME: ${{ secrets.DB_TRIAGE_NAME }}
          envkey_HCTI_API_KEY: ${{ secrets.HCTI_API_KEY }}
          envkey_HCTI_API_USER_ID: ${{ secrets.HCTI_API_USER_ID }}
          envkey_MYSQL_ATTR_SSL_CA: ${{ secrets.MYSQL_ATTR_SSL_CA }}
          envkey_SECURE_SETTINGS: True
          envkey_DEBUG: False
          envkey_MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN}}
          envkey_S3_AWS_STORAGE_BUCKET_NAME: ${{ secrets.S3_AWS_STORAGE_BUCKET_NAME}}
          envkey_S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY}}
          envkey_S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY}}
          directory: src/core
          file_name: .env
          fail_on_empty: false
      - name: üè¢ Install Amazon Client
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install || true
          aws --version
          curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
          sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl
      - name: ü§ê Log in to AWS Lightsail with Secrets
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Installing dependancies
        run: |
          sudo pip3 install --upgrade pip
          sudo pip3 install -r Infrastructure/requirements.txt
      - name: üì¶ Collecting all static files
        run: |
          python3 src/manage.py collectstatic --noinput
          python3 src/manage.py makemigrations --noinput
          python3 src/manage.py migrate --noinput
      - name: üê≥ Create a Docker Container for DJANGO
        run: docker build -t mapmakerdev:latest -f ./Infrastructure/Docker/DockerfileDEV .
      - name: üì¨ Upload Backend image to AWS container register
        run: |
          service_name=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${service_name} \
            --label mapmakerdev \
            --image mapmakerdev:latest
      - name: üê≥ Create a Docker Container for NGINX
        run: docker build -t nginx:latest -f ./Infrastructure/nginx/Dockerfile .
      - name: üì¨ Upload NGINX image to AWS container register
        run: |
          service_name=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${service_name} \
            --label nginx \
            --image nginx:latest
      - name: =========== All done. Cleaning up ‚ôªÔ∏è  ===========
        run: ls
      - name: Build Alerts
        if: ${{ failure() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üö® Deployment failed üö®
            Build ${{ github.run_id }} failed

            Something went wrong while building the NGINX container the containers to AWS. See the details here:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - name: üöÄ Launching the Containers
        run: |
          aws lightsail create-container-service-deployment --service-name ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }} \
          --containers file://Infrastructure/AWS/deploymentconfig.json \
          --public-endpoint file://Infrastructure/AWS/publicendpoint.json


  pull-request:
    needs: [buildcontainers, linter]
    name: üîÉ Creating Pull request to merge with Master
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "master"
          pr_assignee: "two-trick-pony-NL"
          pr_title: "ü§ñ Merge and Deploy ${{ github.ref }}"
          pr_body: "Verify the code is working on triage.mapmaker.nl If you merge this pull-request the code will be deployed to production. Check out the changes here: https://github.com/${{ github.repository }}/commit/${{github.sha}}"
          pr_label: "automatic-pullrequest"
          github_token: ${{ secrets.GH_TOKEN }}
